diff --git a/README.txt b/README.txt
index 99afe45..8a4cdc3 100644
--- a/README.txt
+++ b/README.txt
@@ -1,9 +1,9 @@
-SOCIAL AUTH GOOGLE MODULE
+SOCIAL AUTH INSTAGRAM MODULE
 
 INTRODUCTION
 ------------
 
-Social Auth Google Module is a Google Authentication integration for Drupal.
+Social Auth Facebook Module is a Google Authentication integration for Drupal.
 
 REQUIREMENTS
 ------------
@@ -12,3 +12,4 @@ This module requires the following modules:
 
  * Social Auth (https://drupal.org/project/social_auth)
  * Social API (https://drupal.org/project/social_api)
+
diff --git a/config/schema/social_auth_google.schema.yml b/config/schema/social_auth_google.schema.yml
index f81bcc0..ca1f7b6 100644
--- a/config/schema/social_auth_google.schema.yml
+++ b/config/schema/social_auth_google.schema.yml
@@ -4,7 +4,10 @@ social_auth_google.settings:
   mapping:
     app_id:
       type: string
-      label: 'Client ID'
+      label: 'Application ID'
     app_secret:
       type: string
-      label: 'Client Secret'
+      label: 'App Secret'
+    graph_version:
+      type: float
+      label: 'Google Graph API version'
diff --git a/social_auth_google.info.yml b/social_auth_google.info.yml
index e01ff8e..5e14b24 100644
--- a/social_auth_google.info.yml
+++ b/social_auth_google.info.yml
@@ -1,6 +1,6 @@
 name: Social Auth Google
 type: module
-description: 'Social Auth integration for Google.'
+description: 'Allows users to authenticate with their Google accounts.'
 package: Social
 core: 8.x
 configure: social_auth_google.settings_form
diff --git a/social_auth_google.install b/social_auth_google.install
index 056b44e..7324fb2 100644
--- a/social_auth_google.install
+++ b/social_auth_google.install
@@ -11,7 +11,7 @@ use Drupal\social_auth\Controller\SocialAuthController;
 /**
  * Implements hook_requirements().
  *
- * Checks that a compatible version of oAuth2 Google library for the
+ * Checks that a compatible version of oAuth2 Facebook library for the
  * leagueoAuthclient with Composer. Check installation instructions
  * from the README.txt.
  */
diff --git a/social_auth_google.routing.yml b/social_auth_google.routing.yml
index 0050f1a..b2c7190 100644
--- a/social_auth_google.routing.yml
+++ b/social_auth_google.routing.yml
@@ -7,10 +7,10 @@ social_auth_google.redirect_to_google:
   options:
     no_cache: TRUE
 
-social_auth_google.callback:
+social_auth_google.return_from_google:
   path: 'user/login/google/callback'
   defaults:
-    _controller: '\Drupal\social_auth_google\Controller\GoogleAuthController::callback'
+    _controller: '\Drupal\social_auth_google\Controller\GoogleAuthController::returnFromGoogle'
   requirements:
     _role: 'anonymous'
   options:
diff --git a/social_auth_google.rules.events.yml b/social_auth_google.rules.events.yml
new file mode 100644
index 0000000..2f267c2
--- /dev/null
+++ b/social_auth_google.rules.events.yml
@@ -0,0 +1,14 @@
+social_auth_google.user_login:
+  label: 'User has logged in via Google login'
+  category: 'User'
+  context:
+    account:
+      type: 'entity:user'
+      label: 'Logged in user'
+social_auth_google.user_created:
+  label: 'User has been created via Google login'
+  category: 'User'
+  context:
+    account:
+      type: 'entity:user'
+      label: 'Logged in user'
diff --git a/social_auth_google.services.yml b/social_auth_google.services.yml
index 6ee3544..7729ec0 100644
--- a/social_auth_google.services.yml
+++ b/social_auth_google.services.yml
@@ -6,4 +6,9 @@ services:
       - '@event_dispatcher'
       - '@entity_field.manager'
       - '@url_generator.non_bubbling'
-      - '@social_auth.social_auth_data_handler'
+      - '@social_auth_google.persistent_data_handler'
+
+  social_auth_google.persistent_data_handler:
+    class: Drupal\social_auth_google\GoogleAuthPersistentDataHandler
+    arguments:
+      - '@session'
diff --git a/src/Controller/GoogleAuthController.php b/src/Controller/GoogleAuthController.php
index 14c9441..bd3edba 100644
--- a/src/Controller/GoogleAuthController.php
+++ b/src/Controller/GoogleAuthController.php
@@ -4,12 +4,12 @@ namespace Drupal\social_auth_google\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\social_api\Plugin\NetworkManager;
-use Drupal\social_auth\SocialAuthDataHandler;
 use Drupal\social_auth\SocialAuthUserManager;
 use Drupal\social_auth_google\GoogleAuthManager;
 
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Routing\TrustedRedirectResponse;
+use Drupal\social_auth_google\GoogleAuthPersistentDataHandler;
 use Symfony\Component\HttpFoundation\RequestStack;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 
@@ -33,9 +33,9 @@ class GoogleAuthController extends ControllerBase {
   private $userManager;
 
   /**
-   * The google authentication manager.
+   * The Facebook authentication manager.
    *
-   * @var \Drupal\social_auth_google\GoogleAuthManager
+   * @var \Drupal\social_auth_facebook\FacebookAuthManager
    */
   private $googleManager;
 
@@ -47,11 +47,11 @@ class GoogleAuthController extends ControllerBase {
   private $request;
 
   /**
-   * The Social Auth Data Handler.
+   * The Facebook Persistent Data Handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var \Drupal\social_auth_facebook\FacebookAuthPersistentDataHandler
    */
-  private $dataHandler;
+  private $persistentDataHandler;
 
   /**
    * The data point to be collected.
@@ -71,35 +71,34 @@ class GoogleAuthController extends ControllerBase {
    * GoogleAuthController constructor.
    *
    * @param \Drupal\social_api\Plugin\NetworkManager $network_manager
-   *   Used to get an instance of social_auth_google network plugin.
+   *   Used to get an instance of social_auth_facebook network plugin.
    * @param \Drupal\social_auth\SocialAuthUserManager $user_manager
    *   Manages user login/registration.
-   * @param \Drupal\social_auth_google\GoogleAuthManager $google_manager
+   * @param \Drupal\social_auth_facebook\FacebookAuthManager $facebook_manager
    *   Used to manage authentication methods.
    * @param \Symfony\Component\HttpFoundation\RequestStack $request
    *   Used to access GET parameters.
-   * @param \Drupal\social_auth\SocialAuthDataHandler $social_auth_data_handler
-   *   SocialAuthDataHandler object.
+   * @param \Drupal\social_auth_facebook\FacebookAuthPersistentDataHandler $persistent_data_handler
+   *   FacebookAuthPersistentDataHandler object.
    * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
    *   Used for logging errors.
    */
-  public function __construct(NetworkManager $network_manager, SocialAuthUserManager $user_manager, GoogleAuthManager $google_manager, RequestStack $request, SocialAuthDataHandler $social_auth_data_handler, LoggerChannelFactoryInterface $logger_factory) {
+  public function __construct(NetworkManager $network_manager, SocialAuthUserManager $user_manager, GoogleAuthManager $google_manager, RequestStack $request, GoogleAuthPersistentDataHandler $persistent_data_handler, LoggerChannelFactoryInterface $logger_factory) {
 
     $this->networkManager = $network_manager;
     $this->userManager = $user_manager;
     $this->googleManager = $google_manager;
     $this->request = $request;
-    $this->dataHandler = $social_auth_data_handler;
+    $this->persistentDataHandler = $persistent_data_handler;
     $this->loggerFactory = $logger_factory;
 
     // Sets the plugin id.
     $this->userManager->setPluginId('social_auth_google');
 
-    // Sets session prefix for data handler.
-    $this->dataHandler->getSessionPrefix('social_auth_google');
-
     // Sets the session keys to nullify if user could not logged in.
-    $this->userManager->setSessionKeysToNullify(['access_token']);
+    $this->userManager->setSessionKeysToNullify([
+      $this->persistentDataHandler->getSessionPrefix() . 'access_token',
+    ]);
     $this->setting = $this->config('social_auth_google.settings');
   }
 
@@ -112,7 +111,7 @@ class GoogleAuthController extends ControllerBase {
       $container->get('social_auth.user_manager'),
       $container->get('social_auth_google.manager'),
       $container->get('request_stack'),
-      $container->get('social_auth.social_auth_data_handler'),
+      $container->get('social_auth_google.persistent_data_handler'),
       $container->get('logger.factory')
     );
   }
@@ -135,16 +134,14 @@ class GoogleAuthController extends ControllerBase {
     // Google service was returned, inject it to $googleManager.
     $this->googleManager->setClient($google);
 
-    $data_points = explode(',', $this->getDataPoints());
-
     // Generates the URL where the user will be redirected for Google login.
     // If the user did not have email permission granted on previous attempt,
     // we use the re-request URL requesting only the email address.
-    $google_login_url = $this->googleManager->getGoogleLoginUrl($data_points);
+    $google_login_url = $this->googleManager->getGoogleLoginUrl();
 
     $state = $this->googleManager->getState();
 
-    $this->dataHandler->set('oAuth2State', $state);
+    $this->persistentDataHandler->set('oAuth2State', $state);
 
     return new TrustedRedirectResponse($google_login_url);
   }
@@ -154,7 +151,7 @@ class GoogleAuthController extends ControllerBase {
    *
    * Google returns the user here after user has authenticated in Google.
    */
-  public function callback() {
+  public function returnFromGoogle() {
     // Checks if user cancel login via Google.
     $error = $this->request->getCurrentRequest()->get('error');
     if ($error == 'access_denied') {
@@ -171,18 +168,19 @@ class GoogleAuthController extends ControllerBase {
       return $this->redirect('user.login');
     }
 
-    $state = $this->dataHandler->get('oAuth2State');
+    $state = $this->persistentDataHandler->get('oAuth2State');
 
     if (!empty($_GET['error'])) {
       drupal_set_message($this->t('Google login failed. Probably User Declined Authentication.'), 'error');
       return $this->redirect('user.login');
     }
-    elseif (empty($_GET['state']) || ($_GET['state'] !== $state)) {
+    else if (empty($_GET['state']) || ($_GET['state'] !== $state)) {
       unset($_SESSION['oauth2state']);
       drupal_set_message($this->t('Google login failed. Unvalid oAuth2 State.'), 'error');
       return $this->redirect('user.login');
     }
 
+
     $this->googleManager->setClient($google)->authenticate();
 
     // Gets user's FB profile from Google API.
@@ -191,6 +189,7 @@ class GoogleAuthController extends ControllerBase {
       return $this->redirect('user.login');
     }
 
+
     $data = [];
 
     $data_points = explode(',', $this->getDataPoints());
@@ -203,8 +202,8 @@ class GoogleAuthController extends ControllerBase {
     }
 
     // Saves access token to session.
-    $this->dataHandler->set('access_token', $this->googleManager->getAccessToken());
-
+    $this->persistentDataHandler->set('access_token', $this->googleManager->getAccessToken());
+    var_dump($google_profile);
     // If user information could be retrieved.
     return $this->userManager->authenticateUser($google_profile->getName(), $google_profile->getEmail(), 'social_auth_google', $google_profile->getId(), $google_profile->getAvatar(), json_encode($data));
   }
diff --git a/src/Form/GoogleAuthSettingsForm.php b/src/Form/GoogleAuthSettingsForm.php
index 36824b3..4b20f65 100644
--- a/src/Form/GoogleAuthSettingsForm.php
+++ b/src/Form/GoogleAuthSettingsForm.php
@@ -78,7 +78,7 @@ class GoogleAuthSettingsForm extends SocialAuthSettingsForm {
 
     $form['google_settings'] = [
       '#type' => 'details',
-      '#title' => $this->t('Google Client settings'),
+      '#title' => $this->t('Google App settings'),
       '#open' => TRUE,
       '#description' => $this->t('You need to first create a Google App at <a href="@google-dev">@google-dev</a>', ['@google-dev' => 'https://developers.google.com/apps']),
     ];
@@ -88,7 +88,7 @@ class GoogleAuthSettingsForm extends SocialAuthSettingsForm {
       '#required' => TRUE,
       '#title' => $this->t('Client ID'),
       '#default_value' => $config->get('client_id'),
-      '#description' => $this->t('Copy the Client ID here.'),
+      '#description' => $this->t('Copy the Client ID of your Google App here. This value can be found from your App Dashboard.'),
     ];
 
     $form['google_settings']['client_secret'] = [
@@ -96,35 +96,46 @@ class GoogleAuthSettingsForm extends SocialAuthSettingsForm {
       '#required' => TRUE,
       '#title' => $this->t('Client Secret'),
       '#default_value' => $config->get('client_secret'),
-      '#description' => $this->t('Copy the Client Secret here.'),
+      '#description' => $this->t('Copy the Client Secret of your Google App here. This value can be found from your App Dashboard.'),
     ];
 
+
     $form['google_settings']['data_points'] = [
       '#type' => 'textfield',
-      '#title' => $this->t('Data Points to be Collected'),
+      '#title' => $this->t('Data Points To Be Collected'),
       '#default_value' => 'name,email',
       '#description' => $this->t('Define the data point to be stored in database, data points must be separated by comma.'),
     ];
 
-    $form['google_settings']['authorized_redirect_url'] = [
+    $form['google_settings']['oauth_redirect_url'] = [
       '#type' => 'textfield',
       '#disabled' => TRUE,
-      '#title' => $this->t('Authorized redirect URIs'),
-      '#description' => $this->t('Copy this value to <em>Authorized redirect URIs</em> field of your Google App settings.'),
+      '#title' => $this->t('Valid OAuth redirect URIs'),
+      '#description' => $this->t('Copy this value to <em>Valid OAuth redirect URIs</em> field of your Google App settings.'),
       '#default_value' => $GLOBALS['base_url'] . '/user/login/google/callback',
     ];
 
-    $form['google_settings']['authorized_javascript_origin'] = [
+    $form['google_settings']['app_domains'] = [
       '#type' => 'textfield',
       '#disabled' => TRUE,
-      '#title' => $this->t('Authorized Javascript Origin'),
-      '#description' => $this->t('Copy this value to <em>Authorized Javascript Origins</em> field of your Google App settings.'),
+      '#title' => $this->t('App Domains'),
+      '#description' => $this->t('Copy this value to <em>App Domains</em> field of your Google App settings.'),
       '#default_value' => $this->requestContext->getHost(),
     ];
 
+    $form['google_settings']['site_url'] = [
+      '#type' => 'textfield',
+      '#disabled' => TRUE,
+      '#title' => $this->t('Site URL'),
+      '#description' => $this->t('Copy this value to <em>Site URL</em> field of your Google App settings.'),
+      '#default_value' => $GLOBALS['base_url'],
+    ];
+
     return parent::buildForm($form, $form_state);
   }
 
+
+
   /**
    * {@inheritdoc}
    */
diff --git a/src/GoogleAuthManager.php b/src/GoogleAuthManager.php
index eb56419..6bba863 100644
--- a/src/GoogleAuthManager.php
+++ b/src/GoogleAuthManager.php
@@ -9,7 +9,7 @@ use Drupal\Core\Routing\UrlGeneratorInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 /**
- * Contains all the logic for Google login integration.
+ * Contains all Simple FB Connect logic that is related to Google interaction.
  */
 class GoogleAuthManager extends OAuth2Manager {
 
@@ -42,22 +42,29 @@ class GoogleAuthManager extends OAuth2Manager {
   protected $urlGenerator;
 
   /**
+   * The Google persistent data handler.
+   *
+   * @var \Drupal\social_auth_google\GoogleAuthPersistentDataHandler
+   */
+  protected $persistentDataHandler;
+
+  /**
    * The Google client object.
    *
-   * @var \League\OAuth2\Client\Provider\Google
+   * @var \Google\Google
    */
   protected $client;
   /**
    * The Google access token.
    *
-   * @var \League\OAuth2\Client\Provider\Google
+   * @var \Google\Google
    */
   protected $token;
 
   /**
    * The Google access token.
    *
-   * @var \League\OAuth2\Client\Provider\Google
+   * @var \Google\Google
    */
   protected $user;
 
@@ -72,12 +79,15 @@ class GoogleAuthManager extends OAuth2Manager {
    *   Used for accessing Drupal user picture preferences.
    * @param \Drupal\Core\Routing\UrlGeneratorInterface $url_generator
    *   Used for generating absoulute URLs.
+   * @param \Drupal\social_auth_google\GoogleAuthPersistentDataHandler $persistent_data_handler
+   *   Used for reading data from and writing data to session.
    */
-  public function __construct(LoggerChannelFactoryInterface $logger_factory, EventDispatcherInterface $event_dispatcher, EntityFieldManagerInterface $entity_field_manager, UrlGeneratorInterface $url_generator) {
-    $this->loggerFactory      = $logger_factory;
-    $this->eventDispatcher    = $event_dispatcher;
-    $this->entityFieldManager = $entity_field_manager;
-    $this->urlGenerator       = $url_generator;
+  public function __construct(LoggerChannelFactoryInterface $logger_factory, EventDispatcherInterface $event_dispatcher, EntityFieldManagerInterface $entity_field_manager, UrlGeneratorInterface $url_generator, GoogleAuthPersistentDataHandler $persistent_data_handler) {
+    $this->loggerFactory         = $logger_factory;
+    $this->eventDispatcher       = $event_dispatcher;
+    $this->entityFieldManager    = $entity_field_manager;
+    $this->urlGenerator          = $url_generator;
+    $this->persistentDataHandler = $persistent_data_handler;
   }
 
   /**
@@ -97,7 +107,7 @@ class GoogleAuthManager extends OAuth2Manager {
    * Gets the data by using the access token returned.
    *
    * @return array
-   *   User info returned by the Google.
+   *   User Info returned by the google.
    */
   public function getUserInfo() {
     $this->user = $this->client->getResourceOwner($this->token);
@@ -110,41 +120,14 @@ class GoogleAuthManager extends OAuth2Manager {
    * @return string
    *   Absolute Google login URL where user will be redirected
    */
-  public function getGoogleLoginUrl($data_points) {
-    $scopes = $this->checkForScopes($data_points);
-    $login_url = $this->client->getAuthorizationUrl($scopes);
+  public function getGoogleLoginUrl() {
+    $login_url = $this->client->getAuthorizationUrl();
 
     // Generate and return the URL where we should redirect the user.
     return $login_url;
   }
 
   /**
-   * Returns scopes required for data point defined by administator.
-   *
-   * @return array
-   *   scopes for authorization URL.
-   */
-  protected function checkForScopes($data_points) {
-    $scopes = [];
-
-    // Scopes required for data point.
-    $scopeForDataPoint = [
-      "name"   => '',
-      "email"  => '',
-    ];
-
-    foreach ($data_points as $data_point) {
-      $scope = $scopeForDataPoint[$data_point];
-      // If scope is not in array, then add it.
-      if (!in_array($scope, $scopes)) {
-        array_push($scopes, $scope);
-      }
-    }
-
-    return $scopes;
-  }
-
-  /**
    * Returns the Google login URL where user will be redirected.
    *
    * @return string
diff --git a/src/GoogleAuthPersistentDataHandler.php b/src/GoogleAuthPersistentDataHandler.php
new file mode 100644
index 0000000..47bb3e4
--- /dev/null
+++ b/src/GoogleAuthPersistentDataHandler.php
@@ -0,0 +1,51 @@
+<?php
+
+namespace Drupal\social_auth_google;
+
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
+
+/**
+ * Variables are written to and read from session via this class.
+ *
+ *  We implement Facebook\PersistentData\PersistentDataInterface using Symfony
+ *  Sessions so that we use this instead of native PHP sessions.
+ */
+class GoogleAuthPersistentDataHandler {
+  protected $session;
+  protected $sessionPrefix = 'social_auth_google_';
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+   *   Used for reading data from and writing data to session.
+   */
+  public function __construct(SessionInterface $session) {
+    $this->session = $session;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function get($key) {
+    return $this->session->get($this->getSessionPrefix() . $key);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function set($key, $value) {
+    $this->session->set($this->getSessionPrefix() . $key, $value);
+  }
+
+  /**
+   * Gets the session prefix for the data handler.
+   *
+   * @return string
+   *   The session prefix.
+   */
+  public function getSessionPrefix() {
+    return $this->sessionPrefix;
+  }
+
+}
diff --git a/src/Plugin/Network/GoogleAuth.php b/src/Plugin/Network/GoogleAuth.php
index a057361..7c20bd6 100644
--- a/src/Plugin/Network/GoogleAuth.php
+++ b/src/Plugin/Network/GoogleAuth.php
@@ -5,7 +5,7 @@ namespace Drupal\social_auth_google\Plugin\Network;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
-use Drupal\social_auth\SocialAuthDataHandler;
+use Drupal\social_auth_google\GoogleAuthPersistentDataHandler;
 use Drupal\social_api\Plugin\NetworkBase;
 use Drupal\social_api\SocialApiException;
 use Drupal\social_auth_google\Settings\GoogleAuthSettings;
@@ -15,7 +15,7 @@ use League\OAuth2\Client\Provider\Google;
 /**
  * Defines a Network Plugin for Social Auth Google.
  *
- * @package Drupal\simple_google_connect\Plugin\Network
+ * @package Drupal\simple_fb_connect\Plugin\Network
  *
  * @Network(
  *   id = "social_auth_google",
@@ -32,11 +32,11 @@ use League\OAuth2\Client\Provider\Google;
 class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
 
   /**
-   * The Social Auth Data Handler.
+   * The Google Persistent Data Handler.
    *
-   * @var \Drupal\social_auth\SocialAuthDataHandler
+   * @var \Drupal\social_auth_google\GoogleAuthPersistentDataHandler
    */
-  protected $dataHandler;
+  protected $persistentDataHandler;
 
   /**
    * The logger factory.
@@ -50,7 +50,7 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
    */
   public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
     return new static(
-      $container->get('social_auth.social_auth_data_handler'),
+      $container->get('social_auth_google.persistent_data_handler'),
       $configuration,
       $plugin_id,
       $plugin_definition,
@@ -63,8 +63,8 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
   /**
    * GoogleAuth constructor.
    *
-   * @param \Drupal\social_auth\SocialAuthDataHandler $data_handler
-   *   The data handler.
+   * @param \Drupal\social_auth_google\GoogleAuthPersistentDataHandler $persistent_data_handler
+   *   The persistent data handler.
    * @param array $configuration
    *   A configuration array containing information about the plugin instance.
    * @param string $plugin_id
@@ -78,7 +78,7 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
    * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
    *   The logger factory.
    */
-  public function __construct(SocialAuthDataHandler $data_handler,
+  public function __construct(GoogleAuthPersistentDataHandler $persistent_data_handler,
                               array $configuration,
                               $plugin_id,
                               array $plugin_definition,
@@ -88,14 +88,14 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
 
     parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $config_factory);
 
-    $this->dataHandler = $data_handler;
+    $this->persistentDataHandler = $persistent_data_handler;
     $this->loggerFactory = $logger_factory;
   }
 
   /**
    * Sets the underlying SDK library.
    *
-   * @return \League\OAuth2\Client\Provider\Google
+   * @return \Google\Google
    *   The initialized 3rd party library instance.
    *
    * @throws SocialApiException
@@ -116,7 +116,7 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
         'clientId'          => $settings->getClientId(),
         'clientSecret'      => $settings->getClientSecret(),
         'redirectUri'       => $GLOBALS['base_url'] . '/user/login/google/callback',
-        'accessType'   => 'offline',
+        'accessType'   => 'offline'
       ];
 
       return new Google($league_settings);
@@ -137,10 +137,10 @@ class GoogleAuth extends NetworkBase implements GoogleAuthInterface {
   protected function validateConfig(GoogleAuthSettings $settings) {
     $client_id = $settings->getClientId();
     $client_secret = $settings->getClientSecret();
-    if (!$client_id || !$client_secret) {
+    if (!$client_id || !$client_secret ) {
       $this->loggerFactory
         ->get('social_auth_google')
-        ->error('Define Client ID and Client Secret on module settings.');
+        ->error('Define App ID and App Secret on module settings.');
       return FALSE;
     }
 
diff --git a/src/Plugin/Network/GoogleAuthInterface.php b/src/Plugin/Network/GoogleAuthInterface.php
index 9c1c58b..19a2ab0 100644
--- a/src/Plugin/Network/GoogleAuthInterface.php
+++ b/src/Plugin/Network/GoogleAuthInterface.php
@@ -5,6 +5,6 @@ namespace Drupal\social_auth_google\Plugin\Network;
 use Drupal\social_api\Plugin\NetworkInterface;
 
 /**
- * Defines the Google Auth interface.
+ * Defines the Facebook Auth interface.
  */
 interface GoogleAuthInterface extends NetworkInterface {}
diff --git a/src/Settings/GoogleAuthSettings.php b/src/Settings/GoogleAuthSettings.php
index c8a6ea9..e584db8 100644
--- a/src/Settings/GoogleAuthSettings.php
+++ b/src/Settings/GoogleAuthSettings.php
@@ -5,7 +5,7 @@ namespace Drupal\social_auth_google\Settings;
 use Drupal\social_api\Settings\SettingsBase;
 
 /**
- * Defines methods to get Social Auth Google settings.
+ * Defines methods to get Social Auth Facebook app settings.
  */
 class GoogleAuthSettings extends SettingsBase implements GoogleAuthSettingsInterface {
 
@@ -58,4 +58,5 @@ class GoogleAuthSettings extends SettingsBase implements GoogleAuthSettingsInter
     return $this->clientSecret;
   }
 
+
 }
diff --git a/src/Settings/GoogleAuthSettingsInterface.php b/src/Settings/GoogleAuthSettingsInterface.php
index 78cf53f..aa0cc85 100644
--- a/src/Settings/GoogleAuthSettingsInterface.php
+++ b/src/Settings/GoogleAuthSettingsInterface.php
@@ -23,4 +23,5 @@ interface GoogleAuthSettingsInterface {
    */
   public function getClientSecret();
 
+
 }
